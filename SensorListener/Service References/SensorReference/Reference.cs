//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SensorListener.SensorReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SensorData", Namespace="http://schemas.datacontract.org/2004/07/TrialExam2Tutor")]
    [System.SerializableAttribute()]
    public partial class SensorData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte LightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte TemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimeStampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Light {
            get {
                return this.LightField;
            }
            set {
                if ((this.LightField.Equals(value) != true)) {
                    this.LightField = value;
                    this.RaisePropertyChanged("Light");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Temperature {
            get {
                return this.TemperatureField;
            }
            set {
                if ((this.TemperatureField.Equals(value) != true)) {
                    this.TemperatureField = value;
                    this.RaisePropertyChanged("Temperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TimeStamp {
            get {
                return this.TimeStampField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeStampField, value) != true)) {
                    this.TimeStampField = value;
                    this.RaisePropertyChanged("TimeStamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SensorReference.ISensorService")]
    public interface ISensorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorService/StoreData", ReplyAction="http://tempuri.org/ISensorService/StoreDataResponse")]
        void StoreData(SensorListener.SensorReference.SensorData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorService/StoreData", ReplyAction="http://tempuri.org/ISensorService/StoreDataResponse")]
        System.Threading.Tasks.Task StoreDataAsync(SensorListener.SensorReference.SensorData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorService/GetAllDatas", ReplyAction="http://tempuri.org/ISensorService/GetAllDatasResponse")]
        SensorListener.SensorReference.SensorData[] GetAllDatas();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorService/GetAllDatas", ReplyAction="http://tempuri.org/ISensorService/GetAllDatasResponse")]
        System.Threading.Tasks.Task<SensorListener.SensorReference.SensorData[]> GetAllDatasAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorService/GetDataFrom", ReplyAction="http://tempuri.org/ISensorService/GetDataFromResponse")]
        SensorListener.SensorReference.SensorData[] GetDataFrom(string FromTimestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorService/GetDataFrom", ReplyAction="http://tempuri.org/ISensorService/GetDataFromResponse")]
        System.Threading.Tasks.Task<SensorListener.SensorReference.SensorData[]> GetDataFromAsync(string FromTimestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorService/GetDataFromTo", ReplyAction="http://tempuri.org/ISensorService/GetDataFromToResponse")]
        SensorListener.SensorReference.SensorData[] GetDataFromTo(string FromTimestamp, string ToTimestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISensorService/GetDataFromTo", ReplyAction="http://tempuri.org/ISensorService/GetDataFromToResponse")]
        System.Threading.Tasks.Task<SensorListener.SensorReference.SensorData[]> GetDataFromToAsync(string FromTimestamp, string ToTimestamp);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISensorServiceChannel : SensorListener.SensorReference.ISensorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SensorServiceClient : System.ServiceModel.ClientBase<SensorListener.SensorReference.ISensorService>, SensorListener.SensorReference.ISensorService {
        
        public SensorServiceClient() {
        }
        
        public SensorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SensorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SensorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SensorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void StoreData(SensorListener.SensorReference.SensorData data) {
            base.Channel.StoreData(data);
        }
        
        public System.Threading.Tasks.Task StoreDataAsync(SensorListener.SensorReference.SensorData data) {
            return base.Channel.StoreDataAsync(data);
        }
        
        public SensorListener.SensorReference.SensorData[] GetAllDatas() {
            return base.Channel.GetAllDatas();
        }
        
        public System.Threading.Tasks.Task<SensorListener.SensorReference.SensorData[]> GetAllDatasAsync() {
            return base.Channel.GetAllDatasAsync();
        }
        
        public SensorListener.SensorReference.SensorData[] GetDataFrom(string FromTimestamp) {
            return base.Channel.GetDataFrom(FromTimestamp);
        }
        
        public System.Threading.Tasks.Task<SensorListener.SensorReference.SensorData[]> GetDataFromAsync(string FromTimestamp) {
            return base.Channel.GetDataFromAsync(FromTimestamp);
        }
        
        public SensorListener.SensorReference.SensorData[] GetDataFromTo(string FromTimestamp, string ToTimestamp) {
            return base.Channel.GetDataFromTo(FromTimestamp, ToTimestamp);
        }
        
        public System.Threading.Tasks.Task<SensorListener.SensorReference.SensorData[]> GetDataFromToAsync(string FromTimestamp, string ToTimestamp) {
            return base.Channel.GetDataFromToAsync(FromTimestamp, ToTimestamp);
        }
    }
}
